% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/socialgraph.R
\name{social_graph}
\alias{social_graph}
\title{Visualize a social network}
\usage{
social_graph(edgelist, sizeby = "none", weighted = FALSE)
}
\arguments{
\item{edgelist}{a dataframe that contains a list of people and their associates. The first column represents
source nodes and the second column represents target nodes.}

\item{sizeby}{custom option to size nodes based on either "degree", "eigenvector", "betweenness", or "closeness" centrality.
Default to "none".}

\item{weighted}{custom option to size edges based on weighted values. Default to "FALSE".}
}
\description{
Function for plotting social networks with options to size nodes based on centrality values and/or edge widths
sized based on edge widths. (NOTE: centrality values are based on an unweighted network)
}
\details{
Degree centrality identifies well-connected nodes.
Eigenvector centrality identifies nodes that are connected to well-connected nodes.
Betweenness centrality identifies nodes that serve as bridges.
Closeness centrality identifies nodes that are close to all other nodes in a network.
}
\examples{
# minimal example
source <- c("a", "a", "b", "c", "d", "d", "d")
target <- c("b", "c", "c", "d", "e", "f", "g")
associations <- data.frame(source, target)
social_graph(edgelist = associations, sizeby = "betweenness")

# FM 3-24 example affiliation matrix
data("fm3_24_affiliation")
affiliations <- as.data.frame(fm3_24_affiliation)
associations <- transform2social(edgelist = affiliations)
social_graph(edgelist = associations, sizeby = "betweenness", weighted = TRUE)

}
